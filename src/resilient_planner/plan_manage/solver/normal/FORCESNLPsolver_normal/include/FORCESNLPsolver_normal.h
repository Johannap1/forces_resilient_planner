/*
FORCESNLPsolver_normal : A fast customized optimization solver.

Copyright (C) 2013-2022 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v6.0.1 on Friday, January 6, 2023 at 7:44:05 AM */
#ifndef FORCESNLPsolver_normal_H
#define FORCESNLPsolver_normal_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif
#ifndef SOLVER_STRING_H
#define SOLVER_STRING_H
#include <string.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double FORCESNLPsolver_normal_float;
typedef double FORCESNLPsolver_normal_ldl_s_float;
typedef double FORCESNLPsolver_normal_ldl_r_float;
typedef double FORCESNLPsolver_normal_callback_float;

typedef double FORCESNLPsolver_normalinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_FORCESNLPsolver_normal
#define MISRA_C_FORCESNLPsolver_normal (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_FORCESNLPsolver_normal
#define RESTRICT_CODE_FORCESNLPsolver_normal (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_FORCESNLPsolver_normal
#define SET_PRINTLEVEL_FORCESNLPsolver_normal    (1)
#endif

/* timing */
#ifndef SET_TIMING_FORCESNLPsolver_normal
#define SET_TIMING_FORCESNLPsolver_normal    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_FORCESNLPsolver_normal			(200)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_FORCESNLPsolver_normal		(FORCESNLPsolver_normal_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_FORCESNLPsolver_normal	(200) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_FORCESNLPsolver_normal			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_FORCESNLPsolver_normal		(FORCESNLPsolver_normal_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_FORCESNLPsolver_normal		(FORCESNLPsolver_normal_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_FORCESNLPsolver_normal	(FORCESNLPsolver_normal_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_FORCESNLPsolver_normal	(FORCESNLPsolver_normal_float)(1E-06)


/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_FORCESNLPsolver_normal      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_FORCESNLPsolver_normal (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_FORCESNLPsolver_normal   (2)

/* solver stopped externally */
#define EXIT_EXTERNAL_FORCESNLPsolver_normal (3)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_FORCESNLPsolver_normal  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_FORCESNLPsolver_normal   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_FORCESNLPsolver_normal  (-6)

/* no progress in method possible */
#define NOPROGRESS_FORCESNLPsolver_normal   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_FORCESNLPsolver_normal   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_FORCESNLPsolver_normal   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_FORCESNLPsolver_normal   (-12)

/* thread error */
#define THREAD_FAILURE_FORCESNLPsolver_normal  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_FORCESNLPsolver_normal  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_FORCESNLPsolver_normal  (-100)

/* Insufficient number of internal memory instances.
 * Increase codeoptions.max_num_mem. */
#define MEMORY_INVALID_FORCESNLPsolver_normal (-101)
/* Number of threads larger than specified.
 * Increase codeoptions.nlp.max_num_threads. */
#define NUMTHREADS_INVALID_FORCESNLPsolver_normal (-102)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)


/* MEMORY STRUCT --------------------------------------------------------*/
typedef struct FORCESNLPsolver_normal_mem FORCESNLPsolver_normal_mem;
#ifdef __cplusplus
extern "C" {
#endif
/* MEMORY STRUCT --------------------------------------------------------*/
extern FORCESNLPsolver_normal_mem * FORCESNLPsolver_normal_external_mem(void * mem_ptr, solver_int32_unsigned i_mem, size_t mem_size);
extern size_t FORCESNLPsolver_normal_get_mem_size( void );
extern size_t FORCESNLPsolver_normal_get_const_size( void );
#ifdef __cplusplus
}
#endif

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 9 */
    FORCESNLPsolver_normal_float xinit[9];

    /* vector of size 340 */
    FORCESNLPsolver_normal_float x0[340];

    /* vector of size 2600 */
    FORCESNLPsolver_normal_float all_parameters[2600];

    /* scalar */
    solver_int32_unsigned num_of_threads;


} FORCESNLPsolver_normal_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x01[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x02[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x03[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x04[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x05[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x06[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x07[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x08[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x09[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x10[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x11[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x12[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x13[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x14[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x15[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x16[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x17[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x18[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x19[17];

    /* column vector of length 17 */
    FORCESNLPsolver_normal_float x20[17];


} FORCESNLPsolver_normal_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* scalar: iteration number */
    solver_int32_default it;

    /* scalar: number of iterations needed to optimality (branch-and-bound) */
    solver_int32_default it2opt;

    /* scalar: inf-norm of equality constraint residuals */
    FORCESNLPsolver_normal_float res_eq;

    /* scalar: inf-norm of inequality constraint residuals */
    FORCESNLPsolver_normal_float res_ineq;

    /* scalar: norm of stationarity condition */
    FORCESNLPsolver_normal_float rsnorm;

    /* scalar: max of all complementarity violations */
    FORCESNLPsolver_normal_float rcompnorm;

    /* scalar: primal objective */
    FORCESNLPsolver_normal_float pobj;

    /* scalar: dual objective */
    FORCESNLPsolver_normal_float dobj;

    /* scalar: duality gap := pobj - dobj */
    FORCESNLPsolver_normal_float dgap;

    /* scalar: relative duality gap := |dgap / pobj | */
    FORCESNLPsolver_normal_float rdgap;

    /* scalar: duality measure */
    FORCESNLPsolver_normal_float mu;

    /* scalar: duality measure (after affine step) */
    FORCESNLPsolver_normal_float mu_aff;

    /* scalar: centering parameter */
    FORCESNLPsolver_normal_float sigma;

    /* scalar: number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;

    /* scalar: number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;

    /* scalar: step size (affine direction) */
    FORCESNLPsolver_normal_float step_aff;

    /* scalar: step size (combined direction) */
    FORCESNLPsolver_normal_float step_cc;

    /* scalar: total solve time */
    FORCESNLPsolver_normal_float solvetime;

    /* scalar: time spent in function evaluations */
    FORCESNLPsolver_normal_float fevalstime;

    /* column vector of length 8: solver ID of FORCESPRO solver */
    solver_int32_default solver_id[8];




} FORCESNLPsolver_normal_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Friday, January 6, 2023 7:44:07 AM */
/* User License expires on: (UTC) Sunday, June 25, 2023 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Sunday, June 25, 2023 10:00:00 PM (approx.) */
/* Solver Id: 3d7b8dbc-6dc3-449a-9507-5e8e20c37599 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef solver_int32_default (*FORCESNLPsolver_normal_extfunc)(FORCESNLPsolver_normal_float* x, FORCESNLPsolver_normal_float* y, FORCESNLPsolver_normal_float* lambda, FORCESNLPsolver_normal_float* params, FORCESNLPsolver_normal_float* pobj, FORCESNLPsolver_normal_float* g, FORCESNLPsolver_normal_float* c, FORCESNLPsolver_normal_float* Jeq, FORCESNLPsolver_normal_float* h, FORCESNLPsolver_normal_float* Jineq, FORCESNLPsolver_normal_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default FORCESNLPsolver_normal_solve(FORCESNLPsolver_normal_params *params, FORCESNLPsolver_normal_output *output, FORCESNLPsolver_normal_info *info, FORCESNLPsolver_normal_mem *mem, FILE *fs, FORCESNLPsolver_normal_extfunc evalextfunctions_FORCESNLPsolver_normal);











#ifdef __cplusplus
}
#endif

#endif
